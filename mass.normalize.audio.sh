# Script designed by Will Gilliam summer 2019 project
# Created to mass apply a set of ffmpeg processes to a entire directory of
# files. Script assumes the following things
# 1. you have a temp directory at /tmp
# 2. date +%s will produce an output with no spaces, normally a number string
#    of the seconds passed since Jan 1 1970 will be printed.
# 3. you have ffmpeg, wc, awk, head, cat, sed and paste installed. With exception
#    of ffmpeg, I believe a typical install will have these packages. When in
#    doubt, you can install the required packages. This script was developed
#    on a stock Raspbian 10 (Buster) image, and required the addition of ffmpeg.
# 4. The file names have no white spaces, or special letters that would require
#    the usage of the double quote or escape sequences to handle the names from
#    bash.
# 5. The files you are processing are opus, ogg, and m4a audio formats.
# 6. Your prefered output is a m4a file with a -vbr setting of 4
# 7. You don't want to be spammed with output unless there is a error. Output
#    of this script will be nothing, unless there is an error.
# 
# What this script will output is a complete list of commands based on the contents
# of a directory full of 3 various and common audio file formats. From this scripts output
# you can make the file execuctable and run it from its /tmp directory location
# or cat the file into a program like parallel if you have access to multiple CPU
# cores or CPU's
#
# naming scheme for variables is:
# All caps when setting file path variables. data generated by the script will
# be stored in lower case

# Build script list of pathname variables, others are created when various files
# are generated during the run of the script. Once the completed script has been
# generated, it is susgested that it is checked for errors before proceding.
# USE AT YOUR OWN RISK, This script is alpha and should never be used in a 
# production environment. Always backup data before running this script or any
# script to automate a task
#
# Take the directory you are in when you run the script and store it for later
SRCDIR=`echo $PWD`
# add .new to the end of the file path and create a directory for our processed
# files
DESTDIR=`echo $PWD`.new
mkdir $DESTDIR
# make the directory in your temp folder where the scripts work files will be created
WORKDIR=/tmp/conversion.`date +%s`
mkdir $WORKDIR
# ffmpeg set of commands on how to process the files
FFMPEGHEAD="ffmpeg -hide_banner -loglevel panic -i"
FFMPEGSTRING="-filter:a loudnorm -c:a aac -vbr 4"
#create the list of source files
find $SRCDIR/* -type f > $WORKDIR/filenames.txt
# count how many files we are working with in the script
songcount=`wc -l $WORKDIR/filenames.txt | awk '{print $1}'`
echo "$songcount files detected by the script, Building Script files now"
# create two files with the header as well as the command string
yes -- $FFMPEGHEAD | head -n $songcount > $WORKDIR/ffmpeg.head.txt
yes -- $FFMPEGSTRING | head -n $songcount > $WORKDIR/ffmpeg.command.txt

# Use the list of source files to create the output file paths. Also converts 
# the files to a single format from opus, ogg or m4a
cat $WORKDIR/filenames.txt | sed 's+'$SRCDIR'+'$DESTDIR'+g' | sed 's+opus+m4a+g' | sed 's+ogg+m4a+g' > $WORKDIR/dest.filenames.txt
# paste the seperate pieces of the jop file into a finished product ready to be ran
paste -d" " $WORKDIR/ffmpeg.head.txt $WORKDIR/filenames.txt $WORKDIR/ffmpeg.command.txt $WORKDIR/dest.filenames.txt > $WORKDIR/job.file.worklist
# tell the user where his script file can be found
echo script file generated at location $WORKDIR named job.file.worklist

echo "SRCDIR=$SRCDIR" >> $WORKDIR/variables.dump
echo "DESTDIR=$DESTDIR" >> $WORKDIR/variables.dump
echo "WORKDIR=$WORKDIR" >> $WORKDIR/variables.dump
echo "FFMPEGHEAD=$FFMPEGHEAD" >> $WORKDIR/variables.dump
echo "FFMPEGSTRING=$FFMPEGSTRING" >> $WORKDIR/variables.dump
echo "songcount=$songcount" >> $WORKDIR/variables.dump
